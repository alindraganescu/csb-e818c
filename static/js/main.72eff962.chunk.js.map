{"version":3,"sources":["Header.js","App.js","index.js"],"names":["Header","history","App","useState","firstTextInput","setFirstTextInput","secondTextInput","setSecondTextInput","images","setImages","downloadedImage","setDownloadedImage","Math","floor","random","index","setIndex","useEffect","fetch","then","result","ok","json","Error","error","jsonResult","data","memes","console","log","catch","className","type","placeholder","value","onChange","event","target","onClick","length","prevIndex","pop","push","files","prev","URL","createObjectURL","loadFile","node","document","getElementsByClassName","domtoimage","toPng","dataUrl","img","Image","src","alert","id","url","alt","name","rootElement","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.72eff962.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function Header() {\r\n  return (\r\n    <header>\r\n      <div>Memefy Me</div>\r\n    </header>\r\n  );\r\n}\r\n","import \"./styles.css\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport Header from \"./Header\";\nimport \"./fonts.css\";\nimport domtoimage from \"dom-to-image\";\n\nconst history = [];\n\nexport default function App() {\n  const [firstTextInput, setFirstTextInput] = useState(\"\");\n  const [secondTextInput, setSecondTextInput] = useState(\"\");\n  const [images, setImages] = useState(null);\n  const [downloadedImage, setDownloadedImage] = useState(null);\n  const [index, setIndex] = useState(Math.floor(Math.random() * 100));\n\n  useEffect(() => {\n    fetch(\"https://api.imgflip.com/get_memes\")\n      .then(\n        (result) => {\n          if (result.ok) {\n            return result.json();\n          }\n          throw Error(\"Failed to get the data.\");\n        },\n        (error) => {\n          throw Error(\"Network Error:\" + error);\n        }\n      )\n      .then((jsonResult) => {\n        setImages(jsonResult.data.memes);\n        console.log(jsonResult.data.memes);\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  }, []);\n  // try {\n  //   const result = await fetch(\"https://api.imgflip.com/get_memes\");\n  //   if(result.ok) {\n  //     return result.json();\n  //   }\n  //   throw Error(\"Failed to get the data.\");\n  //   const jsonResult = await result.json();\n  //   console.log(jsonResult);\n  // } catch(error) {\n  //   // do if someting went wrong.\n  //    console.error(error);\n  // }\n\n  const loadFile = (event) => {\n    if (event.target.files[0]) {\n      console.log(event.target.files[0]);\n      const length = images.length;\n      setImages((prev) => {\n        return [...prev, URL.createObjectURL(event.target.files[0])];\n      });\n\n      setIndex(length);\n      history.push(index);\n      console.log(history);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <div className=\"memetextInput\">\n        <input\n          className=\"memeInput\"\n          type=\"text\"\n          placeholder=\"Top Text\"\n          value={firstTextInput}\n          onChange={(event) => setFirstTextInput(event.target.value)}\n        />\n        <input\n          className=\"memeInput\"\n          type=\"text\"\n          placeholder=\"Bottom Text\"\n          value={secondTextInput}\n          onChange={(event) => setSecondTextInput(event.target.value)}\n        />\n      </div>\n\n      <div className=\"buttonsArea\">\n        {/* Previous meme button */}\n        <button\n          onClick={() => {\n            if (history.length > 0) {\n              const prevIndex = history.pop();\n              setIndex(prevIndex);\n              console.log(history);\n            }\n          }}\n        >\n          Previous\n        </button>\n\n        {/* Next meme button */}\n        <button\n          className=\"nextButton\"\n          onClick={() => {\n            setIndex(Math.floor(Math.random() * images.length));\n            history.push(index);\n            console.log(history);\n          }}\n        >\n          Next\n        </button>\n\n        {/* Input file button */}\n        <label className=\"custom-file-upload\">\n          <input type=\"file\" onChange={(event) => loadFile(event)} />\n          Upload\n        </label>\n\n        {/* Download meme button */}\n        <button\n          className=\"downloadButton\"\n          onClick={() => {\n            if (firstTextInput === \"\" && secondTextInput === \"\") {\n              alert(\"Fill the meme text to download the meme.\");\n              return;\n            }\n            var node = document.getElementsByClassName(\"imageArea\")[0];\n\n            domtoimage\n              .toPng(node)\n              .then(function (dataUrl) {\n                var img = new Image();\n                img.src = dataUrl;\n                setDownloadedImage(img);\n                // document.body.appendChild(img);\n              })\n              .catch(function (error) {\n                console.error(\"oops, something went wrong!\", error);\n              });\n          }}\n        >\n          Download\n        </button>\n\n        {/* Reset button */}\n        <button\n          className=\"resetButton\"\n          onClick={() => {\n            setFirstTextInput(\"\");\n            setSecondTextInput(\"\");\n            setDownloadedImage(null);\n          }}\n        >\n          Reset\n        </button>\n      </div>\n\n      <div>\n        {images && (\n          <figure className=\"imageArea\">\n            <h2 id=\"topText\">{firstTextInput}</h2>\n            <img\n              src={images[index].url ? images[index].url : images[index]}\n              alt={images[index].name}\n            />\n            <h2 id=\"bottomText\">{secondTextInput}</h2>\n          </figure>\n        )}\n        {downloadedImage && (\n          <figure className=\"imageArea\">\n            <img src={downloadedImage.src} alt=\"created_image\" />\n          </figure>\n        )}\n      </div>\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}